# -*- coding: utf-8 -*-
"""빅데이터처리 기말 대체 프로젝트.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yed8Hu4OuFa6mo7UI7FHcHSuAm2bxXfI

# 지역별 도서 대출 수
"""

!pip install koreanize-matplotlib

import koreanize_matplotlib

# 구글 드라이브와 연동
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# 지역별 도서 대출 수 (2022.01~05)
file_path = '/content/drive/MyDrive/bigdata_processing/지역별_도서_대출_수.csv'
df = pd.read_csv(file_path, encoding='utf-8')
df

print(df.columns)

"""## '월', '합계' 열 삭제 및 월별 합계 계산"""

# 첫 열('월'), 마지막 열('합계') 삭제
df = df.drop(columns=['월','합계'])  # 없는 열은 무시)

# 열별 합계 계산
total_row = df.sum(axis=0)

# 월별 합계를 나타내는 5번째 행만 남기기
df = df.iloc[[4]].reset_index(drop=True)

# 결과 확인
print(df)

"""## 시도명 전처리 : 현재 행정구역명으로 변경"""

# 새로운 열 이름 리스트
new_columns = ['서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시',
               '대전광역시', '울산광역시', '세종특별자치시', '경기도', '강원특별자치도',
               '충청북도', '충청남도', '전북특별자치도', '전라남도', '경상북도',
               '경상남도', '제주특별자치도']


# 열 이름 변경
df.columns = new_columns

# 결과 확인
print(df)

"""## 지도에 시각화 하기 위해 Wide Format -> Long Format 변환"""

# Wide Format -> Long Format 변환
df_long = df.melt(var_name='지역', value_name='대출수')

# 대출수 기준으로 내림차순 정렬
df_long = df_long.sort_values(by='대출수', ascending=False).reset_index(drop=True)

# 결과 확인
print(df_long)

import sys
import matplotlib.pyplot as plt

# Google Colab 환경에서 실행 중인지 확인
if 'google.colab' in sys.modules:
    # debconf를 Noninteractive 모드로 설정
    !echo 'debconf debconf/frontend select Noninteractive' | \
    debconf-set-selections

    # fonts-nanum 패키지를 설치
    !sudo apt-get -qq -y install fonts-nanum

    # Matplotlib의 폰트 매니저 가져오기
    import matplotlib.font_manager as fm

    # 나눔 폰트의 시스템 경로 찾기
    font_files = fm.findSystemFonts(fontpaths=['/usr/share/fonts/truetype/nanum'])

    # 찾은 각 나눔 폰트를 Matplotlib 폰트 매니저에 추가
    for fpath in font_files:
        fm.fontManager.addfont(fpath)

plt.rcParams['font.family'] = 'NanumGothic'
print(plt.rcParams['font.family'], plt.rcParams['font.size']) # 폰트확인

# matplotlib 라이브러리를 불러옵니다.
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import matplotlib as mpl

plt.rcParams['font.family'] = 'NanumGothic'
print(plt.rcParams['font.family'], plt.rcParams['font.size'])   # 폰트확인

# 데이터 정렬
df_long_sorted = df_long.sort_values(by='대출수', ascending=False)

# 그래프 크기 설정
plt.figure(figsize=(12, 8))

# 막대그래프 생성
plt.barh(df_long_sorted['지역'], df_long_sorted['대출수'], color='skyblue')

# 그래프 제목 및 축 레이블 설정
plt.title('지역별 대출 수', fontsize=16)
plt.xlabel('대출수', fontsize=12)
plt.ylabel('지역', fontsize=12)

# y축 순서를 뒤집어서 가장 높은 값이 위로 오게 설정
plt.gca().invert_yaxis()

# 그래프 표시
plt.show()

"""-> 경기도, 서울특별시, 부산광역시 순으로 대출량이 많으며, 수도권역이 절반 이상을 차지함을 알 수 있음

# 시도 행정구역 구분 경계 데이터에 지역별 대출 권수 시각화
"""

import geopandas as gpd

# 압축 해제 후 Shapefile 경로
shp_file_path = "/content/drive/MyDrive/bigdata_processing/N3A_G0010000/N3A_G0010000.shp"

# Shapefile 읽기
gdf = gpd.read_file(shp_file_path)

# 데이터 확인
print(gdf.head())

"""## NAME 열의 고유 값과 개수 출력"""

# NAME 열의 고유 값 출력
unique_names = gdf['NAME'].unique()
print(unique_names)

"""## 시도명 전처리 : 현재 행정구역명으로 변경

"""

# NAME 열 값 수정
gdf['NAME'] = gdf['NAME'].replace({
    '강원도': '강원특별자치도',
    '전라북도': '전북특별자치도',
})

# 수정된 결과 확인
print(gdf['NAME'].unique())

# 'NAME' 열을 '지역'으로 변경하여 병합 준비
gdf = gdf.rename(columns={'NAME': '지역'})

# 병합
merged_gdf = gdf.merge(df_long, on='지역', how='left')

# 병합 결과 확인
print(merged_gdf.head())

# matplotlib 라이브러리를 불러옵니다.
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import matplotlib as mpl

plt.rcParams['font.family'] = 'NanumGothic'    #사용 방법1
print(plt.rcParams['font.family'], plt.rcParams['font.size'])   # 폰트확인

# Choropleth 맵 시각화 (지역 이름 표시)
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
merged_gdf.plot(
    column='대출수',
    cmap='OrRd',
    legend=True,
    linewidth=0.5,
    ax=ax,
    edgecolor='black'
)

# 지역 이름 텍스트 추가
for idx, row in merged_gdf.iterrows():
    ax.text(
        row.geometry.centroid.x,  # 중심 x 좌표
        row.geometry.centroid.y,  # 중심 y 좌표
        row['지역'],               # 표시할 텍스트 (지역 이름)
        fontsize=8,               # 글자 크기
        ha='center',              # 가로 정렬
        color='black'             # 텍스트 색상
    )

# 제목 추가
ax.set_title('지역별 도서 대출 수 Choropleth 맵', fontsize=15)
ax.axis('off')  # 축 숨기기
plt.show()

"""---

# 전국 도서관 분포 현황
"""

import pandas as pd

file_path = '/content/drive/MyDrive/bigdata_processing/전국도서관표준데이터.csv'

national_libraries = pd.read_csv(file_path, encoding='CP949')

national_libraries.head()

"""### 데이터 정보를 확인해 본 결과, null 값이 있는 행은 존재하지 않아 결측치 처리는 필요하지 않았다."""

national_libraries.info()

"""### '시도명'의 고유값을 확인해본 결과, 동일 행정구역이 다른 이름으로 표현되어 있는 경우가 있었다.
- 전북특별자치도 = 전라북도   
  - 2024년 1월 18일, ‘전북특별자치도’가 출범하여 행정구역 명칭이 아래와 같이 변경됨
  - https://overseas.mofa.go.kr/cn-wuhan-ko/brd/m_22785/view.do?seq=1347269
- 강원특별자치도 = 강원도
  - 2023년 6월 11일, 628년 만에 기존의 강원도에서 강원특별자치도로 변경됨
"""

unique_count = national_libraries['시도명'].nunique()
print("행정구역 갯수 : ", unique_count) # 대한민국의 행정 구역은 총 17개이나, 19개로 세어짐

national_libraries['시도명'].unique()

"""### 시도명 전처리 : 기존 이름을 새로운 특별자치도 이름으로 통일"""

national_libraries['시도명'] = national_libraries['시도명'].replace({
    '전라북도': '전북특별자치도',
    '강원도': '강원특별자치도',
})

# 전처리된 결과 확인
print(national_libraries['시도명'].unique())

# 시도별 전국 도서관 개수 확인
library_count_by_region = national_libraries['시도명'].value_counts().reset_index()

# 열 이름을 '시도명'과 '도서관 수'로 변경
library_count_by_region.columns = ['시도명', '도서관 수']

# 도서관 수를 기준으로 내림차순 정렬하고 인덱스를 재설정
library_count_by_region = library_count_by_region.sort_values(by='도서관 수', ascending=False).reset_index(drop=True)

# 결과 출력: 시도별 도서관 개수를 출력
print(library_count_by_region)

import matplotlib.pyplot as plt

# 그래프 크기 설정
plt.figure(figsize=(12, 8))

# 막대그래프 생성
plt.bar(library_count_by_region['시도명'], library_count_by_region['도서관 수'], color='skyblue')

# 그래프 제목 및 축 레이블 설정
plt.title('시도별 도서관 개수', fontsize=16)
plt.xlabel('시도명', fontsize=12)
plt.ylabel('도서관 수', fontsize=12)

# x축 라벨 회전 설정
plt.xticks(rotation=45)

# 그래프 출력
plt.show()

# NAME 열의 고유 값 출력
unique_names = gdf['지역'].unique()
print(unique_names)

# gdf 열 이름 확인
print(gdf.columns)

# library_count_by_region 열 이름 확인
print(library_count_by_region.columns)

# 'NAME' 열을 '시도명'으로 변경하여 병합 준비
gdf = gdf.rename(columns={'지역': '시도명'})

# Shapefile 데이터와 도서관 개수 데이터 병합
merged_gdf = gdf.merge(library_count_by_region, on='시도명', how='left')

# Choropleth 맵 시각화
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
merged_gdf.plot(
    column='도서관 수',  # 색상을 도서관 수에 따라 설정
    cmap='OrRd',        # 색상 팔레트 (Oranges)
    linewidth=0.5,      # 경계선 두께
    ax=ax,              # 축 설정
    edgecolor='black',  # 경계선 색상
    legend=True         # 범례 표시
)

# 지역 이름 텍스트 추가
for idx, row in merged_gdf.iterrows():
    ax.text(
        row.geometry.centroid.x,  # 중심 x 좌표
        row.geometry.centroid.y,  # 중심 y 좌표
        row['시도명'],               # 표시할 텍스트 (지역 이름)
        fontsize=8,               # 글자 크기
        ha='center',              # 가로 정렬
        color='black'             # 텍스트 색상
    )

# 제목 추가
ax.set_title('시도별 도서관 수 Choropleth 맵', fontsize=15)
ax.axis('off')  # 축 숨기기
plt.show()

"""-> 도서 대출 수와 도서관 수는 무조건 비례하진 않는다. 경상남도는 행정구역 중 도서관이 많은 축에 속하지만 도서대출 수는 낮은 편이다.

# 지역별 도서관 한 곳당 평균 대출 수
(대출 수 / 도서관 수)를 통해 시각화 한다.
"""

import pandas as pd

# library_count_by_region와 df_long_sorted 병합 (지역명을 기준으로)
merged_df = pd.merge(df_long_sorted, library_count_by_region, left_on='지역', right_on='시도명', how='inner')

# "도서관 한 곳당 평균 대출 수" 계산
merged_df['도서관당 평균 대출 수'] = merged_df['대출수'] / merged_df['도서관 수']

# 결과 테이블 정리
average_loans_per_library = merged_df[['지역', '대출수', '도서관 수', '도서관당 평균 대출 수']]

# 내림차순 정렬
average_loans_per_library = average_loans_per_library.sort_values(by='도서관당 평균 대출 수', ascending=False).reset_index(drop=True)

# 결과 출력
print(average_loans_per_library)

import matplotlib.pyplot as plt

# 그래프 크기 설정
plt.figure(figsize=(12, 8))

# 수평 막대그래프 생성
plt.barh(average_loans_per_library['지역'], average_loans_per_library['도서관당 평균 대출 수'], color='skyblue')

# 그래프 제목 및 축 레이블 설정
plt.title('지역별 도서관당 평균 대출 수', fontsize=16)
plt.xlabel('도서관당 평균 대출 수', fontsize=12)
plt.ylabel('지역', fontsize=12)

# y축 순서를 뒤집어서 가장 높은 값이 위로 오게 설정
plt.gca().invert_yaxis()

# 그래프 표시
plt.show()

print(merged_gdf.crs)

print(gdf.columns)
print(average_loans_per_library.columns)

import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# Step 1: 한글 폰트 설정
font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'  # 폰트 경로 설정
font_name = fm.FontProperties(fname=font_path).get_name()
plt.rc('font', family=font_name)
plt.rcParams['axes.unicode_minus'] = False  # 마이너스 부호 깨짐 방지

# Step 2: GeoDataFrame과 데이터 병합
# 'gdf'는 지역별 GeoDataFrame (좌표계 EPSG:3857)
# 'average_loans_per_library'는 도서관당 평균 대출 수를 포함하는 데이터프레임

gdf['시도명'] = gdf['시도명'].replace({
    '전라북도': '전북특별자치도',
    '강원도': '강원특별자치도',
})



gdf = gdf.rename(columns={'시도명': '지역'})  # 병합을 위해 열 이름 변경
merged_gdf = gdf.merge(average_loans_per_library, on='지역', how='left')

# Step 3: Choropleth 맵 그리기
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
merged_gdf.plot(
    column='도서관당 평균 대출 수',  # 색상을 도서관당 평균 대출 수에 따라 설정
    cmap='OrRd',        # 색상 팔레트
    linewidth=0.5,      # 경계선 두께
    ax=ax,              # 축 설정
    edgecolor='black',  # 경계선 색상
    legend=True         # 범례 표시
)

# Step 4: 지역 이름 텍스트 추가
for idx, row in merged_gdf.iterrows():
    if row.geometry.centroid.is_valid:  # 중심 좌표가 유효한 경우에만 텍스트 추가
        ax.text(
            row.geometry.centroid.x,  # 중심 x 좌표
            row.geometry.centroid.y,  # 중심 y 좌표
            row['지역'],               # 표시할 텍스트 (지역 이름)
            fontsize=8,               # 글자 크기
            ha='center',              # 가로 정렬
            color='black'             # 텍스트 색상
        )

# Step 5: 제목 및 레이아웃 설정
ax.set_title('지역별 도서관 한 곳당 평균 대출 수 Choropleth 맵', fontsize=15)
ax.axis('off')  # 축 숨기기
plt.tight_layout()
plt.show()

"""이 가설은 부분적으로 지지됩니다. 도서관 수와 도서 대출 수 사이에 어느 정도 상관관계가 있지만, 완전한 비례 관계는 아닙니다.

	•	경기도와 서울특별시는 도서관 수와 대출 수 모두 상위권에 속합니다.
	•	그러나 경상남도의 경우, 도서관 수는 많지만 대출 수는 상대적으로 낮습니다.
	•	세종특별자치시는 가장 적은 도서관 수(24개)를 가지고 있지만, 도서관당 평균 대출 수는 가장 높습니다(7,080권).

# 1.  지역별 도서관 한 곳당 평균 대출 수와 주변 상권과 비교
"""

import pandas as pd

# 도서관 위치 데이터 읽기
file_path = '/content/drive/MyDrive/bigdata_processing/전국도서관표준데이터.csv'
library_data = pd.read_csv(file_path, encoding='euc-kr')

library_data['시도명'] = library_data['시도명'].replace({
    '전라북도': '전북특별자치도',
    '강원도': '강원특별자치도',
})

# 전처리된 결과 확인
print(national_libraries['시도명'].unique())

# 필요한 열만 추출
library_data = library_data[['도서관명', '시도명', '위도', '경도']]
print(library_data.head())

import os

# 폴더 경로 설정
folder_path = '/content/drive/MyDrive/bigdata_processing/소상공인시장진흥공단_상가(상권)정보_20220630'
all_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith('.csv')]

# 모든 CSV 파일 병합
commerce_data = pd.concat((pd.read_csv(file, encoding='utf-8') for file in all_files), ignore_index=True)

# 상권 데이터의 실제 열 이름 확인
print(commerce_data.columns)

commerce_data.head()

# commerce_data 데이터프레임의 행 개수 출력
print(f"filtered_commerce 행 개수: {len(commerce_data)}")

"""## 상권업종대분류명과 도서관당 평균 대출 수 간 상관계수

"""

import pandas as pd

# 1단계: 필요한 열만 필터링
commerce_big_data_filtered = commerce_data[['시도명', '상권업종대분류명']]

# 2단계: '시도명'과 '상권업종대분류명'으로 그룹화하고 발생 횟수(개수)를 계산
commerce_big_data_grouped = commerce_big_data_filtered.groupby(['시도명', '상권업종대분류명']).size().reset_index(name='상권 개수')

# 3단계: 피벗 테이블 생성 (행: 시도명, 열: 상권업종대분류명, 값: 상권 개수)
commerce_big_data_pivot = commerce_big_data_grouped.pivot(index='시도명', columns='상권업종대분류명', values='상권 개수').fillna(0)

# 4단계: 인덱스 초기화하여 데이터를 더 읽기 쉽게 만듭니다.
commerce_big_data_pivot.reset_index(inplace=True)

# 5단계: 결과 데이터프레임 출력
print(commerce_big_data_pivot)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: `commerce_pivot`와 `average_loans_per_library` 병합
# `average_loans_per_library`는 '지역'(시도명)과 '도서관당 평균 대출 수' 데이터를 포함
average_loans_per_library.rename(columns={'지역': '시도명'}, inplace=True)  # 열 이름 통일
merged_data = pd.merge(average_loans_per_library[['시도명', '도서관당 평균 대출 수']], commerce_big_data_pivot, on='시도명', how='inner')

# Step 2: 상관계수 계산=
numeric_data = merged_data.select_dtypes(include=['number'])
correlation_result = numeric_data.corr()['도서관당 평균 대출 수'].drop('도서관당 평균 대출 수')

# Step 3: 상관계수 출력
print("상권업종별 상관계수:")
print(correlation_result)

# Step 4: 상관계수 시각화 (막대그래프)
plt.figure(figsize=(16, 6))
correlation_result.sort_values(ascending=False).plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('상권업종대분류명과 도서관당 평균 대출 수 간 상관계수', fontsize=16)
plt.ylabel('상관계수', fontsize=12)
plt.xlabel('상권업종대분류명', fontsize=12)
plt.xticks(rotation=60, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## 상권업종중분류명과 도서관당 평균 대출 수 간 상관계수"""

import pandas as pd

# 1단계: 필요한 열만 필터링
commerce_middle_data_filtered = commerce_data[['시도명', '상권업종중분류명']]

# 2단계: '시도명'과 '상권업종중분류명'으로 그룹화하고 발생 횟수(개수)를 계산
commerce_middle_data_grouped = commerce_middle_data_filtered.groupby(['시도명', '상권업종중분류명']).size().reset_index(name='상권 개수')

# 3단계: 피벗 테이블 생성 (행: 시도명, 열: 상권업종중분류명, 값: 상권 개수)
commerce_middle_data_pivot = commerce_middle_data_grouped.pivot(index='시도명', columns='상권업종중분류명', values='상권 개수').fillna(0)

# 4단계: 인덱스 초기화하여 데이터를 더 읽기 쉽게 만듭니다.
commerce_middle_data_pivot.reset_index(inplace=True)

# 5단계: 결과 데이터프레임 출력
print(commerce_middle_data_pivot)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: `commerce_pivot`와 `average_loans_per_library` 병합
# `average_loans_per_library`는 '지역'(시도명)과 '도서관당 평균 대출 수' 데이터를 포함
result_df.rename(columns={'지역': '시도명'}, inplace=True)  # 열 이름 통일
merged_data = pd.merge(average_loans_per_library[['시도명', '도서관당 평균 대출 수']], commerce_pivot, on='시도명', how='inner')

# Step 2: 상관계수 계산=
numeric_data = merged_data.select_dtypes(include=['number'])
correlation_result = numeric_data.corr()['도서관당 평균 대출 수'].drop('도서관당 평균 대출 수')

# Step 3: 상관계수 출력
print("상권업종별 상관계수:")
print(correlation_result)

# Step 4: 상관계수 시각화 (막대그래프)
plt.figure(figsize=(16, 6))
correlation_result.sort_values(ascending=False).plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('상권업종중분류명과 도서관당 평균 대출 수 간 상관계수', fontsize=16)
plt.ylabel('상관계수', fontsize=12)
plt.xlabel('상권업종중분류명', fontsize=12)
plt.xticks(rotation=60, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# result_df의 '지역'과 commerce_pivot의 '시도명' 열 이름을 맞춰줍니다.
average_loans_per_library.rename(columns={'지역': '시도명'}, inplace=True)

# Step 2: 데이터 병합
merged_data = pd.merge(average_loans_per_library[['시도명', '도서관당 평균 대출 수']], commerce_pivot, on='시도명', how='inner')

numeric_data = merged_data.select_dtypes(include=['number'])

# Step 3: 상관계수 계산
correlation_result = numeric_data.corr()['도서관당 평균 대출 수'].drop('도서관당 평균 대출 수')

# Step 4: 상관관계 출력
print("상권 업종별 도서관당 평균 대출 수와의 상관계수:")
print(correlation_result)

# Step 5: 상관관계 시각화 (막대그래프)
plt.figure(figsize=(16, 6))
correlation_result.sort_values(ascending=False).plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('상권 업종별 도서관당 평균 대출 수와의 상관계수', fontsize=16)
plt.ylabel('상관계수', fontsize=12)
plt.xlabel('상권업종대분류명', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## 도서관 반경 1km 상권과 도서관당 평균 대출 수와의 상관계수"""

import geopandas as gpd
from shapely.geometry import Point

# Step 1: 도서관 데이터를 GeoDataFrame으로 변환
library_gdf = gpd.GeoDataFrame(
    library_data,
    geometry=gpd.points_from_xy(library_data['경도'], library_data['위도']),
    crs='EPSG:4326'
)

# Step 2: 상권 데이터를 GeoDataFrame으로 변환
commerce_gdf = gpd.GeoDataFrame(
    commerce_data,
    geometry=gpd.points_from_xy(commerce_data['경도'], commerce_data['위도']),
    crs='EPSG:4326'
)

# Step 3: 좌표계를 적합한 단위 (EPSG:3857)로 변경
library_gdf = library_gdf.to_crs(epsg=3857)
commerce_gdf = commerce_gdf.to_crs(epsg=3857)

# Step 4: 도서관 반경 1km 버퍼 생성
library_gdf['buffer'] = library_gdf.geometry.buffer(1000)  # 1km = 1000m

# Step 5: 도서관 버퍼 GeoDataFrame 생성
buffer_gdf = gpd.GeoDataFrame(library_gdf[['buffer']], geometry='buffer', crs=library_gdf.crs)

# Step 6: 공간 조인으로 도서관 반경 1km 내 상권 데이터 추출
filtered_commerce = gpd.sjoin(commerce_gdf, buffer_gdf, how='inner', predicate='intersects')

# Step 7: 필터링된 데이터로 필요한 열만 유지
filtered_commerce = filtered_commerce[['상호명', '상권업종대분류명', '시도명', '위도', '경도']]

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: 지역별 상권업종별 상권 개수 집계
filtered_commerce_grouped = filtered_commerce.groupby(['시도명', '상권업종대분류명']).size().reset_index(name='상권 개수')

# Step 2: 피벗 테이블 생성 (행: 지역, 열: 상권업종대분류명, 값: 상권 개수)
filtered_commerce_pivot = filtered_commerce_grouped.pivot(index='시도명', columns='상권업종대분류명', values='상권 개수').fillna(0)

# Step 3: 도서관당 평균 대출 수 데이터와 병합
# average_loans_per_library는 '지역' 열이 포함된 도서관당 평균 대출 수 데이터
average_loans_per_library.rename(columns={'지역': '시도명'}, inplace=True)
merged_data = pd.merge(average_loans_per_library[['시도명', '도서관당 평균 대출 수']], filtered_commerce_pivot, on='시도명', how='inner')

numeric_data = merged_data.select_dtypes(include=['number'])

# Step 4: 상관계수 계산
correlation_result = numeric_data.corr()['도서관당 평균 대출 수'].drop('도서관당 평균 대출 수')

# Step 5: 상관관계 출력
print(correlation_result)

# Step 6: 상관관계 시각화 (막대그래프)
plt.figure(figsize=(12, 6))
correlation_result.sort_values(ascending=False).plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('상권업종대분류명과 도서관당 평균 대출 수 간 상관계수', fontsize=16)
plt.ylabel('상관계수', fontsize=12)
plt.xlabel('상권업종대분류명', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# filtered_commerce 데이터프레임의 행 개수 출력
print(f"filtered_commerce 행 개수: {len(filtered_commerce)}")

"""상권업종과 도서관당 평균 대출 수 사이에 약한 양의 상관관계가 있습니다.

	•	부동산(0.480), 스포츠(0.445), 학문/교육(0.434) 업종과 도서관당 평균 대출 수 사이에 가장 높은 상관관계가 나타났습니다.
	•	숙박업(0.145)을 제외한 모든 업종이 0.4 이상의 상관계수를 보였습니다.
이는 교육 시설뿐만 아니라 다양한 상권 업종이 도서 대출 수와 관련이 있음을 시사합니다.

# 2. 접근성(정류장 기준)과의 상관관계
"""

import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sns

# 한글 폰트 설정 (나눔고딕 폰트 사용)
font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'  # 시스템에 설치된 폰트 경로
font_prop = fm.FontProperties(fname=font_path)
plt.rc('font', family=font_prop.get_name())
plt.rcParams['axes.unicode_minus'] = False  # 마이너스 부호 깨짐 방지

# 데이터 로드
csv_path = '/content/drive/MyDrive/bigdata_processing/국토교통부_전국 버스정류장 위치정보_20221012/2022년_전국버스정류장 위치정보_데이터.csv'

# CSV 파일 로드
station_data = pd.read_csv(csv_path, encoding='utf-8')  # 인코딩 확인 필요

library_location = national_libraries[["위도", "경도"]]

average_loans_per_library.columns

library_location.columns

library_location.head()

# 도서관 데이터 GeoDataFrame으로 변환
library_gdf = gpd.GeoDataFrame(
    national_libraries,  # 원본 데이터프레임
    geometry=gpd.points_from_xy(
        national_libraries['경도'], national_libraries['위도']
    ),  # 경도, 위도로 포인트 생성
    crs='EPSG:4326'  # WGS84 좌표계
)

# 정류장 데이터 GeoDataFrame으로 변환
station_gdf = gpd.GeoDataFrame(
    station_data,
    geometry=gpd.points_from_xy(station_data['경도'], station_data['위도']),  # 정류장 경도, 위도
    crs='EPSG:4326'  # WGS84 좌표계
)

library_gdf = library_gdf.to_crs(epsg=3857)
station_gdf = station_gdf.to_crs(epsg=3857)

# Step 3: 도서관 반경 500m 버퍼 생성
library_gdf['buffer'] = library_gdf.geometry.buffer(500)  # 500m 반경 생성

# Step 4: 도서관 버퍼 데이터 생성
buffer_gdf = gpd.GeoDataFrame(library_gdf[['buffer', '시도명']], geometry='buffer', crs=library_gdf.crs)

# Step 5: 공간 조인으로 도서관 반경 500m 내 정류장 데이터 추출
filtered_station = gpd.sjoin(
    station_gdf,          # 정류장 데이터
    buffer_gdf,           # 도서관 버퍼 데이터
    how='inner',          # 도서관 버퍼 내에 포함된 정류장만 선택
    predicate='intersects'  # 정류장이 도서관 반경과 교차하는지 확인
)

# Step 6: 필터링된 데이터 확인
print(filtered_station.head())  # 도서관 반경 500m 내 정류장 데이터 출력

# Step 7: 지역별 정류장 수 집계
station_count_by_region = (
    filtered_station.groupby('시도명')
    .size()  # 각 시도별 정류장 수 계산
    .reset_index(name='정류장 수')  # 결과를 DataFrame으로 반환
)

# Step 8: 결과 확인
print(station_count_by_region)

import matplotlib.pyplot as plt
import numpy as np

# 데이터 준비
regions = average_loans_per_library['시도명']
library_loans = average_loans_per_library['도서관당 평균 대출 수']
station_counts = station_count_by_region['정류장 수']

# 그래프 그리기
fig, ax1 = plt.subplots(figsize=(16, 7))

# 첫 번째 Y축 (도서관당 평균 대출 수)
ax1.bar(regions, library_loans, color='blue', alpha=0.7, label='도서관당 평균 대출 수')
ax1.set_ylabel('도서관당 평균 대출 수', fontsize=12, color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

# 두 번째 Y축 (정류장 수)
ax2 = ax1.twinx()
ax2.plot(regions, station_counts, color='orange', marker='o', linestyle='-', linewidth=2, label='정류장 수')
ax2.set_ylabel('정류장 수', fontsize=12, color='orange')
ax2.tick_params(axis='y', labelcolor='orange')

# X축 설정
ax1.set_xlabel('지역', fontsize=12)
plt.xticks(rotation=45, ha='right')

# 범례 추가
fig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)

# 제목 설정
plt.title('지역별 도서관당 평균 대출 수와 정류장 수 비교', fontsize=16)

# 레이아웃 조정 및 표시
plt.tight_layout()
plt.show()

"""정류장 수가 많은 지역(예: 서울특별시, 경기도)은 도서관당 대출 수가 평균 이하로 나타났습니다.
이는 대중교통 접근성이 높더라도 도서관 이용률과 직접적인 상관관계가 낮을 수 있음을 의미합니다. 교통 접근성보다는 도서관 프로그램, 시설 수준 등의 요인이 대출률에 더 큰 영향을 미쳤을 가능성이 있습니다.

# 3. 디지털 문화 역세권인지에 따른 도서 대출량
"""

# 데이터 로드
csv_path = '/content/drive/MyDrive/bigdata_processing/디지털 문화역세권 (2022).csv'

# CSV 파일 로드
digital_subway = pd.read_csv(csv_path, encoding='utf-8')  # 인코딩 확인 필요
digital_subway.head()

digital_subway

# 새로운 열 이름 리스트
new_columns = ['시도명', '시군구명', '시군구코드', '검색량년월', '시설분류명',
               '시설수', '검색수', '파일명', '기준일자']

# 열 이름 변경
digital_subway.columns = new_columns
digital_subway.head()

# 시도명별 시설수 합계 계산
cultural_facilities_count_per_city = digital_subway.groupby('시도명')['시설수'].sum().reset_index()

# 결과 확인
print(cultural_facilities_count_per_city)

import matplotlib.pyplot as plt
import numpy as np

# 데이터 준비
regions = average_loans_per_library['시도명']  # 지역 이름
library_loans = average_loans_per_library['도서관당 평균 대출 수']  # 도서관당 평균 대출 수
facility_counts = cultural_facilities_count_per_city['시설수']  # 시설 수

# 그래프 그리기
fig, ax1 = plt.subplots(figsize=(16, 7))

# 첫 번째 Y축 (도서관당 평균 대출 수)
ax1.bar(regions, library_loans, color='blue', alpha=0.7, label='도서관당 평균 대출 수')
ax1.set_ylabel('도서관당 평균 대출 수', fontsize=12, color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

# 두 번째 Y축 (시설 수)
ax2 = ax1.twinx()
ax2.plot(regions, facility_counts, color='green', marker='o', linestyle='-', linewidth=2, label='시설 수')
ax2.set_ylabel('시설 수', fontsize=12, color='green')
ax2.tick_params(axis='y', labelcolor='green')

# X축 설정
ax1.set_xlabel('지역', fontsize=12)
plt.xticks(rotation=45, ha='right')

# 범례 추가
fig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)

# 제목 설정
plt.title('지역별 도서관당 평균 대출 수와 문화 시설 수 비교', fontsize=16)

# 레이아웃 조정 및 표시
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# 데이터 준비
regions = cultural_facilities_count_per_city['시도명']  # 지역 이름
facility_counts = cultural_facilities_count_per_city['시설수']  # 시설 수
station_counts = station_count_by_region['정류장 수']  # 정류장 수

# 그래프 그리기
fig, ax1 = plt.subplots(figsize=(16, 7))

# 첫 번째 Y축 (시설 수)
ax1.bar(regions, facility_counts, color='purple', alpha=0.7, label='시설 수')
ax1.set_ylabel('시설 수', fontsize=12, color='purple')
ax1.tick_params(axis='y', labelcolor='purple')

# 두 번째 Y축 (정류장 수)
ax2 = ax1.twinx()
ax2.plot(regions, station_counts, color='orange', marker='o', linestyle='-', linewidth=2, label='정류장 수')
ax2.set_ylabel('정류장 수', fontsize=12, color='orange')
ax2.tick_params(axis='y', labelcolor='orange')

# X축 설정
ax1.set_xlabel('지역', fontsize=12)
plt.xticks(rotation=45, ha='right')

# 범례 추가
fig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)

# 제목 설정
plt.title('지역별 시설 수와 정류장 수 비교', fontsize=16)

# 레이아웃 조정 및 표시
plt.tight_layout()
plt.show()

"""# 결론

가설 1. 도서 대출 수가 많은 지역은 도서관이 많을 것이다.
->

**도서관 접근성 개선**

1. 도서관 수 확대: 세종특별자치시의 사례에서 볼 수 있듯이, 도서관 수가 적더라도 도서관당 평균 대출 수가 높을 수 있습니다.
   따라서 단순히 도서관 수를 늘리는 것보다는 전략적으로 도서관을 배치하는 것이 중요합니다.
2. 도서관 위치 최적화: 상권 데이터와 도서관 위치를 분석하여 접근성이 높은 곳에 도서관을 설치해야 합니다.
  특히 부동산(0.480), 스포츠(0.445), 학문/교육(0.434) 업종과 도서관당 평균 대출 수 사이에 높은 상관관계가 나타났으므로, 이러한 업종이 밀집한 지역에 도서관을 설치하는 것이 효과적일 수 있습니다.

**도서관 서비스 개선**

1.	도서관 운영 시간 확대: 분석해보지 않았지만 평일, 토요일, 공휴일 운영 시간을 분석하여 이용자들의 니즈에 맞게 운영 시간을 조정하는 것이 도움이 될 수 있습니다.
2.	열람 좌석 수 증대: 도서관의 열람 좌석 수를 늘려 더 많은 이용자가 동시에 이용할 수 있도록 합니다.

**상권과 연계한 독서 문화 조성**

1.	복합 문화 공간 조성: 상권업종 중 ‘관광/여가/오락’이 도서관당 평균 대출 수와 양의 상관관계(0.420)를 보였고, 문화시설이 많은 지역이 도서 대출 수가 많은 모습을 보였습니다.도서관과 문화시설을 연계한 복합 공간을 조성합니다.
2.	교육 시설과의 연계: 학문/교육 업종과의 상관관계(0.434)를 고려하여, 학교나 학원과 연계한 독서 프로그램을 개발합니다.

### 사용 데이터
- 도담(2022 제1호).pdf
  - 지역별 도서 대출 수만 사용
- 전국도서관표준데이터.csv
  - https://www.data.go.kr/data/15013109/standard.do#tab_layer_grid
  - 2024-08-16까지의 데이터기준일자를 데이터가 있음
- 행정경계(시도)
  - 국토지리정보원 연속수치지형도 행정경계 데이터
  - https://www.vworld.kr/dtmk/dtmk_ntads_s002.do?searchKeyword=%EC%8B%9C%EB%8F%84&searchOrganization=&searchBrmCode=&searchTagList=&searchFrm=&pageIndex=1&gidmCd=&gidsCd=&sortType=00&svcCde=MK&dsId=30253&listPageIndex=1
- 국토교통부_전국 버스정류장 위치정보
  - https://www.data.go.kr/data/15067528/fileData.do#layer_data_infomation
- 디지털 문화역세권 (2022)
  - https://www.bigdata-culture.kr/bigdata/user/data_market/detail.do?id=b496a15e-81f5-44d4-b516-7a594f4abfd3
- 소상공인시장진흥공단_상가(상권)정보_20220630
  - https://www.data.go.kr/data/15083033/fileData.do
"""